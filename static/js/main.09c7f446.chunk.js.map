{"version":3,"sources":["Components/Sidebar/ImgsSidebar/edit.svg","Components/Sidebar/ImgsSidebar/folder.svg","Components/Sidebar/ImgsSidebar/menu.svg","Components/Sidebar/ImgsSidebar/settings.svg","Components/SideNotes/Note/remove.svg","Components/SideNotes/Note/edit.svg","Components/SideNotes/Note/Note.js","Components/SideNotes/SideNotes.js","Components/Sidebar/Sidebar.js","Components/ListNotes/ListNotes.js","Components/MainArea/MainArea.js","Components/DisplayNote/DisplayNote.js","App.js","redux/notes/notesReducer.js","redux/notes/selectedReducer.js","redux/store.js","index.js"],"names":["Note","props","console","log","dispatch","useDispatch","className","to","pathname","title","subtitle","onClick","type","payload","id","src","delIcon","alt","edit","SideNotes","notes","useSelector","state","notesReducer","useState","noteList","setNoteList","useEffect","onSubmit","e","preventDefault","onChange","filteredArr","filter","item","toLowerCase","includes","target","value","placeholder","map","body","Sidebar","window","innerWidth","checkWidth","setCheckWidth","checkWidthFunc","addEventListener","removeEventListener","toggleNav","setToggleNav","Menu","FolderIcon","LogoEdit","Tools","ListNotes","MainArea","inputInfo","setInputInfo","inputModify","setInputModify","selected","selectedReducer","selectedNotes","validation","setValidation","updateInput","actualInput","getAttribute","toggle","newObjState","length","uuidv4","htmlFor","DisplayNote","useParams","indexArticle","findIndex","obj","App","path","element","INITIAL_STATE","rootReducer","combineReducers","action","newNoteArr","push","actionPayload","index","splice","note","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09c7f446.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/edit.d7d0ce0e.svg\";","export default __webpack_public_path__ + \"static/media/folder.0fe7aef3.svg\";","export default __webpack_public_path__ + \"static/media/menu.1b377fab.svg\";","export default __webpack_public_path__ + \"static/media/settings.b282a86f.svg\";","export default __webpack_public_path__ + \"static/media/remove.562b6f7b.svg\";","export default __webpack_public_path__ + \"static/media/edit.3c70b537.svg\";","import React from 'react'\r\nimport \"./Note.css\"\r\nimport delIcon from \"./remove.svg\"\r\nimport edit from \"./edit.svg\"\r\nimport {Link} from \"react-router-dom\"\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nexport default function Note(props) {\r\n  // props ce sont les parametes qu'on a inséere dans <Notes/> dans le composant SideNote\r\n  console.log(\"mes props de SideNotes:\", props)\r\n\r\n  // qui permet d'envoer les données a mon reducer pour quil les traite et rentre dans le switch\r\n  const dispatch = useDispatch()\r\n\r\n  const deleteNote =() =>{\r\n    dispatch({\r\n      type: \"DELETENOTE\", \r\n      payload : props.id\r\n    })\r\n  }\r\n\r\n  const modifyNote = () =>{\r\n    dispatch({\r\n      type : \"VISUALIZENOTE\",\r\n      payload : props\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n  <li className='txt-note-prev'>\r\n    {/* div qui decrit la note  a gauche */}\r\n\r\n    <Link to={{\r\n      pathname : `/displaynote/${props.title}`\r\n    }}>\r\n    <div className='bloc-note-left'>\r\n      <p>{props.title}</p>\r\n      <p>{props.subtitle}</p>\r\n    </div>\r\n    </Link>\r\n\r\n    {/* div qui decrit la note  a droite */}\r\n    <div className=\"bloc-note-right\">\r\n      <button onClick={deleteNote}>\r\n        <img src={delIcon} alt=\"btn supprimer\"/>\r\n      </button>\r\n      \r\n      {/* link au cas ou on est sur une autre page on met un Link */}\r\n      <Link to=\"/edit\">\r\n        <button onClick={modifyNote}>\r\n          <img src={edit} alt=\"btn editer\"/>\r\n        </button>\r\n      </Link>\r\n      \r\n\r\n    </div>\r\n\r\n  </li>\r\n  )\r\n}\r\n","import React,{useState, useEffect} from 'react'\r\nimport \"./SideNotes.css\"\r\n// use selector pour selectionner le state du store\r\nimport {useSelector } from \"react-redux\"\r\nimport Note from './Note/Note'\r\n\r\nexport default function SideNotes() {\r\n\r\n  const {notes} = useSelector(state => state.notesReducer)\r\n  console.log(notes)\r\n\r\n  // etat pour les notes\r\n  const [noteList , setNoteList] = useState(notes)\r\n\r\n  // au montage du composant a chaque fois que notes change, on met a jour l'etat de noteList\r\n  useEffect(() => {\r\n    setNoteList(notes)\r\n  }, [notes]);\r\n\r\n  const preventForm = (e) => e.preventDefault()\r\n\r\n  // gestion de la barre de recherche \r\n  // pour comparer on met tout en majuscule\r\n  const handleFilter = (e) =>{\r\n    const stateCopy = [...notes]\r\n    const filteredArr = stateCopy.filter((item)=> item.title.toLowerCase().includes(e.target.value.toLowerCase()))\r\n\r\n    // mis a jour de l'etat\r\n    setNoteList(filteredArr)\r\n  }\r\n\r\n  // la barre de listes de notes a gauche\r\n  return (\r\n    <div className='notes-display'>\r\n      <h2>Mes notes</h2>\r\n\r\n      <form onSubmit={preventForm}>\r\n        <input\r\n        onChange={handleFilter}\r\n        type=\"text\"\r\n        id=\"search-notes\" \r\n        placeholder='Rechercher...'/>\r\n      </form>\r\n\r\n      <ul className='notes-list'>\r\n        {noteList.map(item=>(\r\n          <Note\r\n          key={item.id}\r\n          // on rajoute l'id pour pouvoir retrouver dans le filtre de recherche ma note\r\n          id={item.id}\r\n          title ={item.title}\r\n          subtitle = {item.subtitle}\r\n          body={item.body}\r\n          />\r\n        ))}\r\n      </ul>\r\n      \r\n    </div>\r\n  )\r\n}\r\n","import React,{useState , useEffect} from 'react'\r\nimport './Sidebar.css'\r\nimport { Link } from 'react-router-dom'\r\nimport LogoEdit from \"./ImgsSidebar/edit.svg\"\r\nimport FolderIcon from \"./ImgsSidebar/folder.svg\"\r\nimport Menu from \"./ImgsSidebar/menu.svg\"\r\nimport Tools from \"./ImgsSidebar/settings.svg\"\r\nimport SideNotes from '../SideNotes/SideNotes'\r\n\r\n\r\nexport default function Sidebar() {\r\n\r\n  // state pour detecter la largeur de mon ecran pour etre responsive avec window.innerWidth , mais peut se faire tout a fait en media queries \r\n  const [checkWidth , setCheckWidth] = useState(window.innerWidth)\r\n\r\n  // function\r\n  const checkWidthFunc = () => {\r\n    setCheckWidth(window.innerWidth)\r\n    // console.log(\"update size : \",window.innerWidth)\r\n  }\r\n\r\n  useEffect(()=>{\r\n    window.addEventListener('resize',checkWidthFunc)\r\n\r\n    // cleanUp function\r\n    return () => { \r\n      window.removeEventListener('resize',checkWidthFunc)\r\n    } \r\n  },[])\r\n\r\n  // state pour afficher la nav en responsive\r\n  const [toggleNav , setToggleNav] = useState(false)\r\n\r\n  const toggleNavFunc = () => {\r\n    setToggleNav(!toggleNav)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {checkWidth < 900 &&\r\n        <button \r\n        onClick={toggleNavFunc}\r\n        className=\"toggle-nav-btn\">\r\n          <img src={Menu} alt=\" button responsive menu\" />\r\n        </button>\r\n      }\r\n     \r\n      <nav className={toggleNav ? \"container-sidebar visible-nav\" : \"container-sidebar\" }>\r\n        <div className='sidebar'>\r\n          <div className='three-dots'>\r\n            <div className='dot-nav d-red'></div>\r\n            <div className='dot-nav d-yellow'></div>\r\n            <div className='dot-nav d-green'></div>\r\n          </div>\r\n          \r\n          <ul>\r\n            <Link to=\"/\">\r\n              <li>\r\n                <img src={FolderIcon} alt=\"logo folder\" />\r\n              </li>\r\n            </Link>\r\n\r\n            <Link to=\"/edit\">\r\n              <li>\r\n                <img src={LogoEdit} alt=\"logo edit\" />\r\n              </li>\r\n            </Link>\r\n\r\n            <Link to=\"/tools\">\r\n              <li>\r\n                <img src={Tools} alt=\"logo tools\" />\r\n              </li>\r\n            </Link>\r\n          </ul>\r\n        </div>\r\n\r\n        <SideNotes/>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport \"./ListNotes.css\"\r\nimport {useSelector} from \"react-redux\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nexport default function ListNotes() {\r\n\r\n  // recuperer les données du store\r\n  const {notes} = useSelector(state=> state.notesReducer)\r\n\r\n  return (\r\n    <div className='container-content'>\r\n      <h2>Voici vos notes.</h2>\r\n\r\n      <ul className='notes-list-card'>\r\n        {notes.map((item) => (\r\n          <Link to={{ //pathname= lien du bloc affiché\r\n            pathname:`/displaynote/${item.title}`,\r\n          }}\r\n          key={item.id}\r\n          >\r\n            <li>\r\n              <h2>{item.title}</h2>\r\n              <p>{item.subtitle}</p>\r\n            </li>\r\n          </Link>\r\n        ))\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n","import React,{useState, useEffect } from 'react'\r\nimport \"./MainArea.css\"\r\nimport {useDispatch , useSelector} from \"react-redux\"\r\nimport {v4 as uuidv4} from \"uuid\"\r\n\r\nexport default function MainArea() {\r\n\r\n  // etat des input quand on rempli pour la premier fois une note\r\n  const [inputInfo , setInputInfo] = useState({\r\n    title : \"\",\r\n    subtitle : \"\",\r\n    body:\"\"\r\n  })\r\n\r\n  // gerer l'enregistrment de la modification de la note quand toggle= true (dans le selectedReducer)\r\n  const [inputModify , setInputModify] = useState({\r\n    title : \"\",\r\n    subtitle : \"\",\r\n    body:\"\"\r\n  })\r\n\r\n  // selectionner le selectedReducer grace a useSelector\r\n  const selected = useSelector(state=>state.selectedReducer.selectedNotes)\r\n  console.log(selected)\r\n\r\n  // au changement de l'etat de selected : le mettre a jour \r\n  useEffect(() => {\r\n    setInputModify(selected)\r\n  }, [selected]);\r\n\r\n  // gerer la validation si mal rempli = false\r\n  const [validation , setValidation] = useState(true)\r\n\r\n  // gerer l'enregistrment de la modification de la note\r\n\r\n  // envoyer les données au reducer\r\n  const dispatch = useDispatch()\r\n\r\n  // PAS BESOIN DE RECUPERER LES INPUT EN USEREF ILS SONT DEJA RECUPERE AVEC LE TWO WAY DATA BINDING\r\n  // // recuperer les inputs\r\n  // const allInput = useRef([])\r\n  // const addInput = (el) =>{\r\n  //   if(el && !allInput.current.includes){\r\n  //     allInput.current.push(el)\r\n  //   }\r\n  // }\r\n\r\n  // cest un two way data binding pour la mise a jour de l'input en fonction de inputInfo ou inputModify\r\n  const updateInput = (e) =>{\r\n\r\n    // 1) selectionner l'id\r\n    const actualInput = e.target.getAttribute(\"id\")\r\n\r\n    // console.log(\"OH MY INPUT is :\" , actualInput) \r\n    \r\n    // 2)mise a jour de l'input \r\n    // si toggle est true = on modifie  :  selectedReducer\r\n    if(selected.toggle){\r\n      // met ajour l'etat avec le nouvel input\r\n      const newObjState = {...inputModify , [actualInput] : e.target.value}\r\n\r\n      // console.log(\"What is My newObjstate :\",newObjState)\r\n\r\n      // mise a jour de l'etat\r\n      setInputModify(newObjState)\r\n\r\n    }  // si toggle  est false  = on insere une nouvelle donnée : notesReducer\r\n    else if(selected.toggle === false){\r\n      const newObjState = {...inputInfo , [actualInput] : e.target.value}\r\n\r\n      // mise a jour de l'etat\r\n      setInputInfo(newObjState)\r\n    }\r\n  }\r\n\r\n  // ONSUBMIT DU FORMULAIRE\r\n  const handleForm = (e) =>{\r\n    e.preventDefault()\r\n\r\n    // SELECTED.TOGGLE EST TRUE : \r\n    if(selected.toggle){\r\n      if(inputModify.title.length <1){\r\n        setValidation(false)\r\n        return ; // return : je sors de la condition\r\n      }\r\n      setValidation(true)\r\n\r\n      // dispatch les données modifiées\r\n      dispatch({\r\n        type : \"UPDATENOTE\",\r\n        payload : inputModify //sans avoir besoin de passer un nouvel id car il a deja ete crée , ici cest juste pour modifier\r\n\r\n      })\r\n\r\n      // reset la note UNE FOIS ENREGISTREE pour afficher une autre vide\r\n      dispatch({\r\n        type : \"RESETNOTE\"\r\n      })\r\n\r\n      // remettre a 0 l'etat APRESSS l'avoir dipatché au reducer pour que une nouvelle note vide s'affiche\r\n      setInputModify({\r\n        title : \"\",\r\n        subtitle : \"\",\r\n        body:\"\"\r\n      })\r\n\r\n    } // SELECTED.TOGGLE EST FALSE :\r\n    else if(selected.toggle === false){\r\n\r\n      //  gestion du message si le titre nest pas rempli\r\n      if(inputInfo.title.length <1){\r\n        setValidation(false)\r\n        return ; // return : je sors de la condition\r\n      }\r\n\r\n      setValidation(true)\r\n\r\n      // dispatch les données\r\n      dispatch({\r\n        type: \"ADDNOTE\" ,\r\n        payload : {\r\n          ...inputInfo , \r\n          // ... : on ne peut rajouter si ce n'est qu'en copiant\r\n          id: uuidv4()\r\n        }\r\n      })\r\n\r\n      // remettre a 0 l'etat APRESSS l'avoir dipatché au reducer pour que une nouvelle note vide s'affiche\r\n      setInputInfo({\r\n        title : \"\",\r\n        subtitle : \"\",\r\n        body:\"\"\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='container-content'>\r\n      <h2>Votre plume.</h2>\r\n      <form onSubmit={handleForm}>\r\n        <label htmlFor='title'>Le titre</label>\r\n        <input \r\n        // ref={addInput}\r\n        value={inputModify.toggle ? inputModify.title : inputInfo.title}\r\n        onChange={updateInput}\r\n        type='text' \r\n        id=\"title\" \r\n        />\r\n\r\n        {!validation &&(\r\n          <span className='info-validation'>Veuillez renseigner un titre.</span>\r\n        )}\r\n\r\n        <label htmlFor='subtitle'>Sous-titre</label>\r\n        <input \r\n        // ref={addInput}\r\n        value={inputModify.toggle ? inputModify.subtitle : inputInfo.subtitle}\r\n        onChange={updateInput}\r\n        type='text'\r\n        id=\"subtitle\"\r\n        />\r\n\r\n        <label htmlFor='body'>Votre texte</label>\r\n        <textarea \r\n        // ref={addInput}\r\n        value={inputModify.toggle ? inputModify.body : inputInfo.body}\r\n        onChange={updateInput}\r\n        id='body'\r\n        placeholder='Votre texte...'\r\n        ></textarea>\r\n\r\n        <button>Enregistrer</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport \"./DisplayNote.css\"\r\nimport { useSelector } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nexport default function DisplayNote() {\r\n\r\n  // selectionner l'id de l'url \r\n  const {id} = useParams()\r\n\r\n  const {notes} = useSelector(state=>state.notesReducer)\r\n\r\n  // matcher le titre de la note avec l'id du useParams\r\n  const indexArticle = notes.findIndex(obj=>obj.title === id)\r\n  console.log('MY INDEX ARTICLE ' , indexArticle)\r\n\r\n  return (\r\n    <div className='display-txt-zone'>\r\n      <h2 className='title-display'>\r\n        {/* si la l'id de useParams a bien matché avecle le title de note : alors on affiche le titre : on met [indexArticle] car il correspond a une chaine de caractere */}\r\n        {notes[indexArticle] ? notes[indexArticle].title : \"\"}\r\n      </h2>\r\n      <span className='subtitle-display'>\r\n       {notes[indexArticle] ? notes[indexArticle].subtitle : \"\"}\r\n      </span>\r\n      <p className='txt-display'>\r\n       {notes[indexArticle] ? notes[indexArticle].body : \"\"}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import {Routes , Route} from \"react-router-dom\"\nimport Sidebar from \"./Components/Sidebar/Sidebar\"\nimport ListNotes from \"./Components/ListNotes/ListNotes\";\nimport MainArea from \"./Components/MainArea/MainArea\";\nimport DisplayNote from \"./Components/DisplayNote/DisplayNote\";\n\nfunction App() {\n  return (\n    <>\n    <Sidebar/>\n    <Routes>\n      <Route path=\"/\" element={<ListNotes/>}/>\n      <Route path=\"/edit\" element={<MainArea/>}/>\n      <Route path=\"/displaynote/:id\" element={<DisplayNote/>}/>\n    </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst INITIAL_STATE = {\r\n  notes: [\r\n    {\r\n      title: \"Cuisine\",\r\n      subtitle: \"Préparer un Osso buco\",\r\n      body: \"Preserved defective offending he daughters on or. Rejoiced prospect yet material servants out answered men admitted. Sportsmen certainty prevailed suspected am as. Add stairs admire all answer the nearer yet length. Advantages prosperous remarkably my inhabiting so reasonably be if. Too any appearance announcing impossible one. Out mrs means heart ham tears shall power every. \",\r\n      id: uuidv4(),\r\n    },\r\n    {\r\n      title: \"Sport\",\r\n      subtitle: \"Courir 10km\",\r\n      body: \"In to am attended desirous raptures declared diverted confined at. Collected instantly remaining up certainly to necessary as. Over walk dull into son boy door went new. At or happiness commanded daughters as. Is handsome an declared at received in extended vicinity subjects. Into miss on he over been late pain an. Only week bore boy what fat case left use. Match round scale now sex style far times. Your me past an much. \",\r\n      id: uuidv4(),\r\n    },\r\n    {\r\n      title: \"Piano\",\r\n      subtitle: \"Jouer l'Impromptu\",\r\n      body: \"Pasture he invited mr company shyness. But when shot real her. Chamber her observe visited removal six sending himself boy. At exquisite existence if an oh dependent excellent. Are gay head need down draw. Misery wonder enable mutual get set oppose the uneasy. End why melancholy estimating her had indulgence middletons. Say ferrars demands besides her address. Blind going you merit few fancy their. \",\r\n      id: uuidv4(),\r\n    },\r\n  ],\r\n};\r\n\r\n\r\n// Alternative à useContext\r\n// stocker le state dans le store \r\n// la function noteReducer prend en parametre le state et laction (changement d'etat)\r\nexport default function notesReducer(state = INITIAL_STATE, action){\r\n\r\n  switch(action.type){\r\n\r\n    // ajouter une note\r\n    case \"ADDNOTE\" : {\r\n      const newNoteArr = [...state.notes]\r\n      newNoteArr.push(action.payload)\r\n    \r\n      return{\r\n        notes : newNoteArr\r\n      }\r\n    } \r\n\r\n    // MODIFIER LA NOTE\r\n    case \"UPDATENOTE\": {\r\n\r\n      // copie\r\n      const newNoteArr = [...state.notes]\r\n\r\n      // la modification faite par le user\r\n      const actionPayload = action.payload\r\n\r\n      // trouver lelement de l'id modifié  qui match avec l'id du state \r\n      const index = newNoteArr.findIndex(obj=>obj.id ===actionPayload.id)\r\n\r\n      // remplacer l'element de l'id modifié stocké dans index par action.payload\r\n      newNoteArr.splice(index, 1, actionPayload)\r\n\r\n      return{\r\n        notes : newNoteArr\r\n      }\r\n    }  \r\n\r\n    // supprimer une note\r\n    case \"DELETENOTE\": {\r\n      \r\n      const newNoteArr = [...state.notes].filter(note => note.id !== action.payload)\r\n      //  ca filtre et retourne que les notes qui ont des id deifferent que action.payload \r\n\r\n      // payload : ce sont les information quon a envoyé dans payload via dispatch  que le reducer recoit\r\n\r\n      // filter : methode en js qui va filtrer selon une condition et retourner un nouveau tableau : filter a la meme  synthaxe que .map()\r\n\r\n      return{\r\n        notes : newNoteArr\r\n      }\r\n    }\r\n \r\n  }\r\n\r\n  return state\r\n}","// on cree ce second reducer pour enregistrer les données des nouvelles notes crée par le user\r\n\r\nconst INITIAL_STATE ={\r\n    selectedNotes : {\r\n        title : \"\",\r\n        subtitle : \"\",\r\n        body : \"\",\r\n        id: \"\" ,\r\n        // toggle pour faire passer l'element cliqué a true afin de pouvoir lafficher\r\n        toggle :false\r\n    }\r\n}\r\n\r\nexport default function selectedReducer(state = INITIAL_STATE, action){\r\n\r\n    switch(action.type){\r\n\r\n        case \"VISUALIZENOTE\" :{\r\n            return{\r\n                // dabord afficher la note \r\n                selectedNotes:{\r\n                    ...action.payload,\r\n                    toggle : true\r\n                }\r\n            }\r\n        } \r\n\r\n        // reinitialiser la note à l'enregistrement de la note\r\n        case \"RESETNOTE\" : {\r\n            return{\r\n                selectedNotes : {\r\n                    title : \"\",\r\n                    subtitle : \"\",\r\n                    body : \"\",\r\n                    id: \"\" ,\r\n                    toggle :false\r\n                }\r\n            }\r\n        } \r\n\r\n       \r\n    }\r\n    return state\r\n}","// importer le combineReducers car on a 2 reducers\r\nimport { createStore , combineReducers } from \"redux\";\r\nimport notesReducer from \"./notes/notesReducer\";\r\nimport selectedReducer from \"./notes/selectedReducer\";\r\n\r\n// combiner les reducer quand on en a plus que 1\r\nconst rootReducer = combineReducers({\r\n    notesReducer ,\r\n    selectedReducer\r\n})\r\n\r\n// stocker les reducer combinés dans le store\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport {BrowserRouter} from \"react-router-dom\"\nimport {Provider} from 'react-redux'\nimport store from \"./redux/store\"\n\n\nReactDOM.render(\n   <BrowserRouter >\n    <Provider store={store}>\n      <App />\n    </Provider>\n   </BrowserRouter> \n  ,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}